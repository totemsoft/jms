<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config />

    <!--
        The controllers are auto-detected POJOs label with the @Controller
        annotation.
    -->
    <context:component-scan scoped-proxy="targetClass" base-package="au.gov.qld.fire.jms.uaa.web">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!--
        The form-based controllers within this application provide
        @RequestMapping annotations at the type level for path mapping URLs
        and @RequestMapping at the method level for request type mappings
        (e.g., GET and POST). In contrast, XxxController - which is not
        form-based - provides @RequestMapping only at the method level for
        path mapping URLs. DefaultAnnotationHandlerMapping is driven by these
        annotations and is enabled by default with Java 5+.
    -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <!--
            property name="interceptors"><list><ref
            bean="myInterceptor1"/></list> </property
        -->
    </bean>

    <!--
        This bean processes annotated handler methods, applying application
        specific PropertyEditors for request parameter binding. It overrides
        the default AnnotationMethodHandlerAdapter.
    -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="webBindingInitializer">
            <bean class="au.gov.qld.fire.web.BindingInitializer" />
        </property>
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
                <bean class="org.springframework.http.converter.StringHttpMessageConverter" />
                <bean class="org.springframework.http.converter.FormHttpMessageConverter" />
                <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
                <ref bean="jsonMessageConverter" />
            </list>
        </property>
    </bean>

    <!--
        - This bean resolves specific types of exception to corresponding
        error views. - The default behaviour of DispatcherServlet is to
        propagate all exceptions to the - servlet container: This will happen
        here with all other types of exception.
    -->
    <bean id="exceptionResolver" class="au.gov.qld.fire.web.servlet.HandlerExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.dao.DataAccessException">common/daoException</prop>
                <prop key="org.springframework.transaction.TransactionException">common/daoException</prop>
                <prop key="au.gov.qld.fire.service.ServiceException">common/serviceException</prop>
                <prop key="au.gov.qld.fire.security.SecurityException">common/securityException</prop>
                <prop key="java.lang.Exception">common/uncaughtException</prop>
            </props>
        </property>
    </bean>

    <!--
        This bean configures the 'prefix' and 'suffix' properties of InternalResourceViewResolver,
        which resolves logical view names returned by Controllers.
        For example, a logical view name of "xxx" will be mapped to "/WEB-INF/module/xxx.jsp".
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        p:prefix="/WEB-INF/module/" p:suffix=".jsp" />

    <!--
        Message source for this context, loaded from localized "messages_xx" files.
    -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
        p:basename="applicationResources" />

</beans>